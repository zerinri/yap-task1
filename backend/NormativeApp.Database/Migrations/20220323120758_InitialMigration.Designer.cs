// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NormativeApp.Database.Data;

namespace NormativeApp.Database.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220323120758_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15");

            modelBuilder.Entity("NormativeApp.Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 3, 23, 13, 7, 57, 860, DateTimeKind.Local).AddTicks(3843),
                            Name = "Breakfast"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 3, 23, 13, 7, 57, 862, DateTimeKind.Local).AddTicks(8971),
                            Name = "Lunch"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 3, 23, 13, 7, 57, 862, DateTimeKind.Local).AddTicks(9004),
                            Name = "Dinner"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2022, 3, 23, 13, 7, 57, 862, DateTimeKind.Local).AddTicks(9009),
                            Name = "Brunch"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2022, 3, 23, 13, 7, 57, 862, DateTimeKind.Local).AddTicks(9012),
                            Name = "Snack"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2022, 3, 23, 13, 7, 57, 862, DateTimeKind.Local).AddTicks(9014),
                            Name = "Midnight snack"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2022, 3, 23, 13, 7, 57, 862, DateTimeKind.Local).AddTicks(9017),
                            Name = "Healty snack"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2022, 3, 23, 13, 7, 57, 862, DateTimeKind.Local).AddTicks(9020),
                            Name = "Dessert"
                        });
                });

            modelBuilder.Entity("NormativeApp.Core.Entities.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PurchaseQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PurchaseUnitMeasure")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 3, 23, 13, 7, 57, 863, DateTimeKind.Local).AddTicks(6425),
                            Name = "Flour",
                            PurchasePrice = 10m,
                            PurchaseQuantity = 1m,
                            PurchaseUnitMeasure = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 3, 23, 13, 7, 57, 863, DateTimeKind.Local).AddTicks(6446),
                            Name = "Pepper",
                            PurchasePrice = 4m,
                            PurchaseQuantity = 10m,
                            PurchaseUnitMeasure = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 3, 23, 13, 7, 57, 863, DateTimeKind.Local).AddTicks(6450),
                            Name = "Oil",
                            PurchasePrice = 7m,
                            PurchaseQuantity = 1m,
                            PurchaseUnitMeasure = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2022, 3, 23, 13, 7, 57, 863, DateTimeKind.Local).AddTicks(6453),
                            Name = "Cheese",
                            PurchasePrice = 15m,
                            PurchaseQuantity = 100m,
                            PurchaseUnitMeasure = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2022, 3, 23, 13, 7, 57, 863, DateTimeKind.Local).AddTicks(6457),
                            Name = "Sugar",
                            PurchasePrice = 3m,
                            PurchaseQuantity = 80m,
                            PurchaseUnitMeasure = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2022, 3, 23, 13, 7, 57, 863, DateTimeKind.Local).AddTicks(6460),
                            Name = "Salt",
                            PurchasePrice = 2m,
                            PurchaseQuantity = 70m,
                            PurchaseUnitMeasure = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2022, 3, 23, 13, 7, 57, 863, DateTimeKind.Local).AddTicks(6463),
                            Name = "Meat",
                            PurchasePrice = 20m,
                            PurchaseQuantity = 1m,
                            PurchaseUnitMeasure = 0
                        });
                });

            modelBuilder.Entity("NormativeApp.Core.Entities.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("NormativeApp.Core.Entities.RecipeIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("UnitMeasure")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeIngredients");
                });

            modelBuilder.Entity("NormativeApp.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PasswordHash = new byte[] { 152, 80, 138, 97, 110, 142, 94, 110, 216, 79, 218, 222, 41, 135, 6, 243, 0, 14, 104, 103, 12, 102, 128, 66, 101, 216, 44, 49, 148, 157, 190, 89, 233, 117, 153, 138, 103, 186, 16, 105, 56, 79, 249, 157, 26, 2, 249, 109, 241, 31, 205, 109, 230, 136, 129, 76, 1, 7, 117, 73, 213, 249, 34, 177 },
                            PasswordSalt = new byte[] { 19, 149, 97, 173, 40, 175, 212, 4, 250, 186, 73, 41, 26, 42, 183, 116, 122, 167, 183, 103, 92, 162, 17, 44, 245, 70, 212, 112, 179, 207, 158, 60, 52, 110, 73, 110, 13, 184, 44, 192, 12, 60, 195, 246, 144, 242, 12, 2, 228, 5, 110, 37, 197, 153, 57, 73, 167, 243, 125, 193, 181, 111, 255, 141, 60, 39, 225, 212, 121, 244, 50, 207, 6, 54, 77, 55, 100, 31, 192, 176, 121, 9, 135, 108, 14, 244, 123, 30, 16, 238, 153, 17, 173, 174, 195, 152, 92, 42, 16, 91, 87, 3, 55, 98, 48, 131, 42, 246, 43, 80, 119, 235, 185, 156, 254, 46, 203, 80, 234, 51, 193, 133, 98, 65, 68, 30, 143, 243 },
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("NormativeApp.Core.Entities.Recipe", b =>
                {
                    b.HasOne("NormativeApp.Core.Entities.Category", "Category")
                        .WithMany("Recipes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("NormativeApp.Core.Entities.RecipeIngredient", b =>
                {
                    b.HasOne("NormativeApp.Core.Entities.Ingredient", "Ingredient")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NormativeApp.Core.Entities.Recipe", "Recipe")
                        .WithMany("RecipeIngredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("NormativeApp.Core.Entities.Category", b =>
                {
                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("NormativeApp.Core.Entities.Ingredient", b =>
                {
                    b.Navigation("RecipeIngredients");
                });

            modelBuilder.Entity("NormativeApp.Core.Entities.Recipe", b =>
                {
                    b.Navigation("RecipeIngredients");
                });
#pragma warning restore 612, 618
        }
    }
}
